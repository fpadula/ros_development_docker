#!/usr/bin/python3

from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
from subprocess import run, PIPE
from os.path import expanduser, abspath
from os import environ


def get_cmd_output(cmd: str):
    return run(cmd.split(), stdout=PIPE).stdout.decode("utf-8").strip()


def main():
    parser = ArgumentParser(
        description="Start docker container for ROS development.",
        formatter_class=ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument("img_name", nargs=1)

    parser.add_argument(
        "--homedir",
        dest="homedir",
        help="The directory to map as the home folder for the docker user.",
        default="",
    )

    parser.add_argument(
        "--exec",
        dest="exec",
        help="Command to execute first when starting container.",
        default="bash",
    )

    parser.add_argument(
        "--rosip",
        dest="rosip",
        help="Value for the variable ROS_IP inside the container.",
        default="127.0.0.1",
    )

    parser.add_argument(
        "--rosmasteruri",
        dest="rosmasteruri",
        help="Value for the variable ROS_MASTER_URI inside the container.",
        default="http://127.0.0.1:11311",
    )

    parser.add_argument(
        "--name",
        dest="name",
        help="Container name.",
        default="image name",
    )

    parser.add_argument(
        "-rt",
        dest="rt",
        help="Adds group 'realtime' to container.",
        action="store_true",
    )

    parser.add_argument(
        "-ic",
        dest="ic",
        help="Don't sync configs in dotfile folder into the workspace.",
        action="store_true",
    )

    parser.add_argument(
        "-nvidia_off",
        dest="nvidia_off",
        help="Disables nvidia-runtime.",
        action="store_true",
    )

    parser.add_argument(
        "--extra",
        dest="extra",
        help="Additional args. Put inside double quotes",
        action="store",
        type=str,
    )

    parsed, _ = parser.parse_known_args()

    img_name = parsed.img_name[0]
    user_name = environ.get("USER")
    user_uid = get_cmd_output(f"id -u {user_name}")
    user_gid = get_cmd_output(f"id -g {user_name}")
    has_rt = parsed.rt
    exec_cmd = parsed.exec
    display = environ.get("DISPLAY")
    rosip = parsed.rosip
    rosmasteruri = parsed.rosmasteruri
    if parsed.name == "image name":
        name = img_name.split(":")[-1]
    else:
        name = parsed.name
    xdg_runtime_dir = environ.get("XDG_RUNTIME_DIR")
    user_home_dir = environ.get("HOME")

    curr_dir = get_cmd_output("pwd")
    if not parsed.homedir:
        homedir = f"{curr_dir}/{img_name.capitalize()}_Projects/"
    else:
        homedir = abspath(expanduser(parsed.homedir)) + "/"

    extra_args = parsed.extra

    print(f"Image: {img_name}")
    print(f"Home dir: {homedir}")
    print(f"Kernel is realtime: {has_rt}")
    print(f"User UID: {user_uid}")
    print(f"User GID: {user_gid}")
    print(f"Command to execute: {exec_cmd}")

    # Syncinc dotfile folder:
    if not parsed.ic:
        cmd_str = f"cp -r {curr_dir}/dotfiles/. {homedir}"
        run(cmd_str.split())

    cmd_str = "docker run -it "
    cmd_str += "--rm "
    if not parsed.nvidia_off:
        cmd_str += "--runtime=nvidia "
        cmd_str += "--gpus all "
    cmd_str += "--privileged "
    cmd_str += f"--user={user_uid}:{user_gid} "
    cmd_str += "--ipc=host "
    cmd_str += "--group-add video "
    cmd_str += "--group-add audio "
    cmd_str += "--group-add dialout "
    cmd_str += "--group-add uucp "
    if has_rt:
        cmd_str += "--group-add realtime "
    cmd_str += "--ulimit rtprio=99 "
    cmd_str += "--ulimit memlock=102400 "
    cmd_str += "--cap-add=sys_nice "
    cmd_str += f"--env=DISPLAY={display} "
    cmd_str += "--env=QT_X11_NO_MITSHM=1 "
    cmd_str += f"--env=ROS_MASTER_URI={rosmasteruri} "
    cmd_str += f"--env=ROS_IP={rosip} "
    cmd_str += "--env=TERM=xterm-256color "
    cmd_str += "--volume=/tmp/.X11-unix:/tmp/.X11-unix "
    cmd_str += f"--volume={homedir}:/home/{user_name}/ "
    cmd_str += "--volume=/dev/:/dev/ "
    cmd_str += "--volume=/etc/udev/:/etc/udev/ "
    cmd_str += f"--volume=/run/user/{user_uid}/pulse:/run/user/1000/pulse "
    cmd_str += f"--workdir=/home/{user_name}/ "
    cmd_str += "--network host "
    cmd_str += "--ulimit nofile=1024:524288 "
    cmd_str += "--device /dev/snd:/dev/snd "
    cmd_str += f"-e PULSE_SERVER=unix:{xdg_runtime_dir}/pulse/native "
    cmd_str += f"-v {xdg_runtime_dir}/pulse/native:{xdg_runtime_dir}/pulse/native "
    cmd_str += f"-v {user_home_dir}/.config/pulse/cookie:/root/.config/pulse/cookie "
    cmd_str += f"--name {name} "
    if extra_args is not None:
        cmd_str += f"{extra_args} "
    cmd_str += f"{img_name} "
    cmd_str += exec_cmd
    # print("############")
    # print(cmd_str)
    run(cmd_str.split())


if __name__ == "__main__":
    main()
